#!/usr/bin/env bash
# Usage: studio create-producer <name>
#
# Summary: Writes a skeleton producer plugin and a FHiCL file to src
#
# Help: studio create-producer <name>
#
#     Calls 'cetskelgen producer <name>',
#     creates an appropriate FHiCL file,
#     and updates your source directory CMakeLists.txt file to compile
#     and link your plugin library.
#
#     NOTE: If you should decide to remove the generated source file,
#     you must edit the CMakeLists.txt to remove the build commands
#     related to it.
#
#     Can be shortened to 'studio cp <name>'
if [ -z $STUDIO_PROJECT_SRC_PATH ]; then
  echo "Please source the setup script"
  exit 1
fi

#checking for empty call
if [ -z "$1" ]; then
echo "'studio create-producer' requires specification of a plugin name."
echo "Please try 'studio help create-producer'"
exit 2
fi

name="$1"
cd "$STUDIO_PROJECT_SRC_PATH"
echo "$STUDIO_PROJECT_SRC_PATH"

if ( !  cetskelgen producer "$name" ) ; then
  echo cetskelgen producer "$name" failed
  exit 2
fi

# ===========
# == cmake ==
# ===========

# Trim everything up to and including the last colon, in case somebody
# specified a namespace-qualified module name.
module_spec="${name##*:}"
targ_name="${module_spec}"_module
src_name=""$targ_name".cc"
liblist="\${module_lib_list}"

cat << EOT >> $STUDIO_PROJECT_SRC_PATH/CMakeLists.txt

# "$module_spec" lib linking
add_library($targ_name SHARED $src_name)
target_link_libraries($targ_name $liblist)

EOT

touch $STUDIO_PROJECT_SRC_PATH/"$module_spec".fcl
cat << EOT >> $STUDIO_PROJECT_SRC_PATH/"$module_spec".fcl
# ${module_spec}.fcl
# bare bones fcl test

physics: {
  producers: {
    p1: {
      module_type: "${module_spec}"
    }
  }
  p: [p1]
}
EOT

echo "To build it now, use 'studio build'."
