#!/usr/bin/env bash

# Usage: studio example <-a | -s | -p | -f>  name
# Summary: Writes a skeleton example plugin along with a FHiCL file to
#          configure it.
#
#          'studio example' will also appropriately update your source
#          directory CMakeLists.txt file to compile and link your plugin
#          library.
#
#          NOTE: if you should decide to remove the generated source file,
#          you must edit the CMakeLists.txt to remove the build commands
#          related to it.
#
# Help: studio example is here to get you template plugins/fcl files/and help 
#       with CMake
#     -a        analyzer
#     -s        service
#     -p        producer
#     -f        filter
#
#
#     studio example -a myAnalyzer
#     OUTPUT:
#		myAnalyzer_module.cc
#		myAnalyzer.fcl
#               CMakeLists.txt

if [ -z $STUDIO_PROJECT_SRC_PATH ]; then
  echo "Please source the setup script"
  exit 1
fi

skeltag=""
ep=""
#checking for empty call
if [ -z "$1" ]; then
echo "'studio example' requires specification of a plugin type."
echo "Please try 'studio help example'"
exit 2
fi

case "$1" in
    "-a")
        skeltag="analyzer"
        ep="a1";;
    "-s")
        skeltag="service"
        ep="s1";;
    "-p")
        skeltag="producer"
        ep="p1";;
    "-f")
        skeltag="filter"
        ep="f1";;
    *)
        echo "Flag not recognized, please check options"
        exit 1 ;;
esac
if [ -z $2 ]; then
echo "Please specify a name for the plugin to be generated."
echo "Please try 'studio help example'"
else
name="$2"
fi
cd "$STUDIO_PROJECT_SRC_PATH"
echo "$STUDIO_PROJECT_SRC_PATH"

if ( !  cetskelgen "$skeltag" "$name" ) ; then 
  echo cetskelgen "$skeltag" "$name" failed
  exit 2
fi

# ===========
# == cmake ==
# ===========
if [ "$skeltag" == "analyzer" -o "$skeltag" == "filter" -o "$skeltag" == producer ]; then
        tag="module"
fi
if [ "$skeltag" == "service" ]; then
        tag="service"
fi
targ_name="$name"_"$tag"
src_name=""$targ_name".cc"
liblist="\${${tag}_lib_list}"

cat << EOT >> $STUDIO_PROJECT_SRC_PATH/CMakeLists.txt

#"$name" lib linking
add_library($targ_name SHARED $src_name)
target_link_libraries($targ_name $liblist)

EOT

touch $STUDIO_PROJECT_SRC_PATH/"$targ_name".fcl
cat << EOT >> $STUDIO_PROJECT_SRC_PATH/"$targ_name".fcl
#"$targ_name".fcl
#bare bones fcl test

physics:{
   ${skeltag}s:{
      $ep:{
         module_type: "$name"
      }
   }
   p:["$ep"]
}
EOT

echo "Your skeleton source file has been written."
echo "To build it now, use 'studio build'."
