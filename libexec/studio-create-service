#!/usr/bin/env bash
# Usage: studio create-service <name>
#
# Summary: Writes a skeleton service plugin and a FHiCL file to src
#
# Help: studio create-service <name>
#
#     Calls 'cetskelgen service:--scope,LEGACY <name>',
#     creates an appropriate FHiCL filea
#     and updates your source directory CMakeLists.txt file to compile
#     and link your plugin library.
#
#     NOTE: if you should decide to remove the generated source file,
#     you must edit the CMakeLists.txt to remove the build commands
#     related to it.
#
#     Can be shortened to 'studio cs <name>'
if [ -z $STUDIO_PROJECT_SRC_PATH ]; then
  echo "Please source the setup script"
  exit 1
fi

#checking for empty call
if [ -z "$1" ]; then
echo "'studio create-service' requires specification of a plugin name."
echo "Please try 'studio help create-service'"
exit 2
fi
name="$1"
cd "$STUDIO_PROJECT_SRC_PATH"
echo "$STUDIO_PROJECT_SRC_PATH"

if ( !  cetskelgen service:--scope,LEGACY "$name" ) ; then
  echo cetskelgen service:--scope,LEGACY "$name" failed
  exit 2
fi

# ===========
# == cmake ==
# ===========

# Trim everything up to and including the last colon, in case somebody
# specified a namespace-qualified service name.
service_spec="${name##*:}"
targ_name="${service_spec}"_service
src_name=""$targ_name".cc"
liblist="\${service_lib_list}"

cat << EOT >> $STUDIO_PROJECT_SRC_PATH/CMakeLists.txt

# "$service_spec" lib linking
add_library($targ_name SHARED $src_name)
target_link_libraries($targ_name $liblist)

EOT

touch $STUDIO_PROJECT_SRC_PATH/"$service_spec".fcl
cat << EOT >> $STUDIO_PROJECT_SRC_PATH/"$service_spec".fcl
# ${service_spec}.fcl
# bare bones fcl test

services: {
  ${service_spec}: {}
}
EOT

echo "To build it now, use 'studio build'."
