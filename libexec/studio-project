#!/usr/bin/env bash

# Usage: studio project [-e,-s] <product> [-v] <version> [-q <qualifiers>] [-n <dirname> ]
#
# Summary: Creates a project area for software suite <product>.
#
# Help: This will create a directory, by default named 'project',
# in the current directory, and in it a small directory tree for your
# work. See 'DIRECTORY STRUCTURE' for complete details on the
# directory structure that is generated.
#
# The project command requires use of a UPS installed product to
# provide the headers your code will include, the libraries to which
# your new code will be linked, and the art framework modules and
# servicesyour FHiCL configuration files will use. Typically this will
# be the code distribution from an experiment, but it could be any UPS
# product.
#
# If no version is specified, the project command will attempt to
# identify and use the most recent version of the named
# product. Specifying a qualifier without explicitly specifying a
# version is unreliable and should be avoided.
#
# If no qualifier is specified, the project command will attempt to use
# whatever qualifiers are found for the selected version of the
# product. If multiple qualifiers are available for that version,
# project command attempts a reasonable choice. In this condition, 
# it is best to specify qualifiers on the command line.
#
# If -n <dirname> is specified, the project directory will be given
# the specified name, rather than the default 'project'.
#
# DIRECTORY STRUCTURE
# The generated directory structure is:
#
# ├── build
# │   └── CMakeCache.txt
# ├── CMakeLists.txt
# ├── ext
# ├── helpers.cmake
# ├── setup.sh
# └── src
#     └── CMakeLists.txt
#
# The 'build' directory is where compiler and linker output will be
# put. The CMakeCache.txt file in this directory is generated and
# updated by CMake, and should not be edited.
#
# The (top-level) CMakeLists.txt contains a great deal of boilerplate
# needed by the CMake build system. It should not require any
# modification. Only edit it if you are a CMake expert, and even in
# that case be careful that your changes are only additions.
#
# The 'ext' directory is a place for you to build any external
# libraries your code will need. If you want to try linking to some
# utility that is built with a standard 'configure/make' system, use
# the --prefix option in configure to point the installation to this
# directory.
#
# The 'helpers.cmake' file contains some CMake macros used by the
# system. If you are a CMake expert, you could add your own macros
# here. Removing or altering the existing macros is likely to break
# the build system.
#
# The 'src' directory is where the source code you write will go. Code
# generated by the module skeleton generators will go here
# automatically.
#
# 'setup.sh' is a bash script must be 'sourced' in each new shell
# session in which you want to work on your project.
# 
# EXAMPLES
#    studio project lariatsoft v06_03_00 -q e10:prof
#    studio project lariatsoft v06_03_00 -q e10:prof -n lariatsoft_project
#    studio project dunetpc v06_18_01
#    studio project dunetpc v06_18_01 -n duntpc_project
#    studio project uboonecode
#    studio project uboonecode -n uboone_project
# can be shortened to 'studio pro'
set -e
#=========================================READING IN ARGUMENTS============================================


arrange_opts() {
    local flags args optstr=$1
    shift

    while (($#)); do
        case $1 in
            --) args+=("$@")
                break;
                ;;
            -*) flags+=("$1")
                if [[ $optstr == *"${1: -1}:"* ]]; then
                    flags+=("$2")
                    shift
                fi
                ;;
            * ) args+=("$1")
                ;;
        esac
        shift
    done
    OPTARR=("${flags[@]}" "${args[@]}")
}

#default values
name=project
unset exp
unset qual
unset rep

#assigning arguments
OPTIND=
OPTARR=
optstring=v:q:r:n:

arrange_opts "$optstring" "$@"
set -- "${OPTARR[@]}"

OPTIND=1
while getopts $optstring opt;do
    case ${opt} in 
           v) 
                ver="$OPTARG"
                ;;
           q) 
                qual="$OPTARG"
                ;;
           r)
                rep="$OPTARG"
                ;;
           n)
                name="$OPTARG"
                ;;
     esac 
done

shift $((OPTIND-1))

#checking for empty call and positional arguments
if [ $# == 0 ] ; then
    echo "'studio project' requires specification of a software suite."
    echo "Please try 'studio help project'"
    exit 2
else
    exp=$1;
    shift;
    if [ $# != 0 ] ; then 
        ver=$1
        shift
        echo $@
    fi
fi


# dummy catchers
if [ -z "$exp" ] && [ -z "$rep" ]; then
    echo "Please specify a software suite name."
    exit
fi

if [ ! -z "$exp" ] && [ ! -z "$rep" ]; then
    echo "You cannot specify a software suite name *and* a repository."
    exit
fi

# need to sanity check exp , ver and qual against currently available ups products
chk=$(ups list -aK+ "$exp" | sort |  tail -1 | sed -e's/"//g')
if [ "QQ$chk" == "QQ" ];then
    echo "Unknown UPS product $exp . Check UPS product name for typo or ensure it is installed in $PRODUCTS."
    exit 2
fi
#version and qual specified
if [ ! -z "$ver" ] && [ ! -z "$qual" ]; then
    chk=$(ups list -aK+ "$exp" "$ver" -q"$qual"| sort | tail -1 | sed -e's/"//g')
    if [ "QQ$chk" == "QQ" ];then
        echo "Unknown version $ver and/or qualifier $qual for UPS product $exp."
        echo "Possible commands"
        ups list -aK+ $exp | sort -u | sed -e's/"//g' | awk '{print "studio project "$1" "$2" -q "$4}'
        exit 2
    fi
    echo "  Using software suite $exp."
    echo "  Qualifier $qual and version $ver will be used."
    echo ""
fi

#no version specified but qual specified
if [ -z "$ver" ] && [ ! -z "$qual" ]; then
    chk=$(ups list -aK+ "$exp" -q"$qual"| sort | tail -1 | sed -e's/"//g')
    if [ "QQ$chk" == "QQ" ];then
        echo "Unknown qualifier $qual for UPS product $exp."
        echo "Possible commands"
        ups list -aK+ $exp | sort -u| sort -u | sed -e's/"//g' | awk '{print "studio project "$1" "$2" -q "$4}'
        exit 2
    fi
    ver=$(ups list -aK+ "$exp" -q"$qual" | sort | tail -1 | awk '{print $2}'| sed -e's/"//g')
    echo "  Using software suite $exp."
    echo "  Qualifier $qual specified but no version specified."
    echo "  Latest version $ver will be used."
    echo ""
fi
#no qual specified but version specified
if [ -z "$qual" ] && [ ! -z "$ver" ]; then
    chk=$(ups list -aK+ "$exp" "$ver" | sort | tail -1 | awk '{print $1}'| sed -e's/"//g')
    if [ "QQ$chk" == "QQ" ];then
        echo " Unknown version $ver for UPS product $exp."
        echo "Possible commands"
        ups list -aK+ $exp | sort -u| sort -u | sed -e's/"//g' | awk '{print "studio project "$1" "$2" -q "$4}'
        exit 2
    fi
    qual=$(ups list -aK+ $exp $ver | sort | tail -1 | awk '{print $4}'| sed -e's/"//g')
    echo "  Using software suite $exp."
    echo "  Version $ver specified but no qualifier specified."
    echo "  Latest qualifier $qual will be used."
    echo ""
fi
#no version and no qual specified
if [ -z "$ver" ] && [ -z "$qual"]; then
    ver=$(ups list -aK+ "$exp" | sort | tail -1 | awk '{print $2}'| sed -e's/"//g')
    qual=$(ups list -aK+ "$exp" "$ver" | sort | tail -1 | awk '{print $4}'| sed -e's/"//g')
    echo "  Using software suite $exp."
    echo "  No qualifier and no version specified."
    echo "  Latest qualifier $qual and version $ver will be used."
    echo ""
fi

#=========================================================================================================
#==============================================MAKING=====================================================
#=============================================NEC DIRS====================================================
#====================================================================+====================================

echo "Creating the project directory '${name}'."

#define some common variables used for generating scripts
PROJ=${PWD}/${name}
BUILD_DIR=${PROJ}/build
EXT_PATH=${PROJ}/ext
SRC_DIR=${PROJ}/src


if [ -d "$PROJ" ]; then
    echo "The directory ${PROJ} already exists, please remove/rename it"
    echo "or specify a different directory name with"
    echo "    studio project $exp -n dirname"
    exit 1
else
    mkdir -p "$PROJ" || ( echo "Failed to project directory $PROJ" ; exit 1)
    mkdir ${BUILD_DIR}
    touch ${BUILD_DIR}/CMakeCache.txt
    mkdir ${EXT_PATH}

    if [ "$rep" == "art-workbook" ]; then
        git clone http://cdcvs.fnal.gov/projects/art-workbook
        mv $PWD/art-workbook $PROJ
        rmdir ${SRC_DIR}
        mv $PROJ/art-workbook ${SRC_DIR}
    else
        mkdir ${SRC_DIR}
    fi
fi

#=========================================================================================================
#==============================================MAKING=====================================================
#===========================================SETUP SCRIPT==================================================
#=========================================================================================================
if [ $(uname -s) = "Darwin" ]; then
    cat << EOF > ${PROJ}/setup.sh
#!/usr/bin/env bash
setup studio
setup $exp $ver -q $qual
export STUDIO_PROJECT_PATH=$PROJ
export STUDIO_PROJECT_BUILD_PATH=$BUILD_DIR
export STUDIO_PROJECT_SRC_PATH=$SRC_DIR
export DYLD_LIBRARY_PATH=$BUILD_DIR/lib:\$DYLD_LIBRARY_PATH
EOF
else
    cat << EOF > ${PROJ}/setup.sh
#!/usr/bin/env bash
setup studio
setup $exp $ver -q $qual
export STUDIO_PROJECT_PATH=$PROJ
export STUDIO_PROJECT_BUILD_PATH=$BUILD_DIR
export STUDIO_PROJECT_SRC_PATH=$SRC_DIR
LD_LIBRARY_PATH=$BUILD_DIR/lib:\$LD_LIBRARY_PATH
EOF
fi

#=========================================================================================================
#==============================================CMAKE======================================================
#=============================================LISTS &=====================================================
#=============================================COMMANDS====================================================
#=========================================================================================================

#CMake stuff
cat $STUDIO_INC/helpers.cmake > ${PROJ}/helpers.cmake
cat $STUDIO_INC/setliblist.cmake > ${PROJ}/setliblist.cmake

#cmake macro

cat $STUDIO_INC/CMakeLists.txt.tmpl > ${PROJ}/CMakeLists.txt

cat << 'EOF' > ${PROJ}/src/CMakeLists.txt
#source cmake list file
#there are two general options:
#    1. everything lives in src directory and we do it all here
#    2. subdirs (requires user to create some of the structure)
#pro-con is easyness vs. choice of what to build

#here is a basic example for option 1.
#    Plugin_name
#    add_library(<fill in which library>)
#    target_link_library(<more nonsense>)
EOF

echo ""
echo "The project directory ${PROJ} has been populated with default scripts."
echo "Remember to source ${PROJ}/setup.sh in each new shell"
echo "Use 'studio help' for more details."
echo ""

